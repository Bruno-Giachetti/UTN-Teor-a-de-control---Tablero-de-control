{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bruno\\\\Desktop\\\\TABLERO DE CONTROL\\\\tablero-control-conmutador\\\\src\\\\Grafica.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n\n//Variables globales\nlet salida = 0; //salida del sistema\nlet indexRedActual = 0; //red actualmente elegida\nlet senalErrorAnterior = 0; //señal de error del loop anterior\n\nconst GraficaFuncionPartida = valuesFormik => {\n  _s();\n  const [chartData, setChartData] = useState({\n    labels: [...Array(101).keys()].map(x => x * 0.1),\n    // etiquetas de 0 a 10 con pasos de 0.1\n    datasets: [{\n      label: 'f(x)',\n      data: [],\n      borderColor: 'rgba(75,192,192,1)',\n      borderWidth: 2,\n      fill: false,\n      stepped: 'before',\n      // Hacer la línea escalonada\n      pointRadius: 0 // Hide points\n    }]\n  });\n  const [chartOptions, setChartOptions] = useState({\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: 'Gráfica de la respuesta del sistema'\n      }\n    },\n    scales: {\n      x: {\n        type: 'linear',\n        title: {\n          display: true,\n          text: 'Milisegundos'\n        },\n        min: 0,\n        max: 10,\n        ticks: {\n          callback: function (value) {\n            return Number.isInteger(value) ? value : null; // Show only integer values\n          }\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Mbps'\n        },\n        min: 0,\n        max: 1500,\n        ticks: {\n          stepSize: 100\n        }\n      }\n    }\n  });\n  React.useEffect(() => {\n    if (valuesFormik !== null && valuesFormik !== void 0 && valuesFormik.valuesInput) {\n      setChartData({\n        labels: [...Array(101).keys()].map(x => x * 0.1),\n        // etiquetas de 0 a 10 con pasos de 0.1\n        datasets: [{\n          label: 'f(t)',\n          data: [],\n          borderColor: 'rgba(75,192,192,1)',\n          borderWidth: 2,\n          fill: false,\n          stepped: 'before',\n          // Hacer la línea escalonada\n          pointRadius: 0 // Hide points\n        }]\n      });\n      calcular(valuesFormik.valuesInput.referencia, valuesFormik.valuesInput.perturbacion, valuesFormik.valuesInput.red1, valuesFormik.valuesInput.red2, valuesFormik.valuesInput.red3);\n    }\n  }, [valuesFormik]);\n  const elegirOtraRed = (indexRedActual, abRedes, valorReferencia) => {\n    let indexRedElegida = indexRedActual;\n    let abRedActual = abRedes[indexRedActual];\n    for (let i = 0; abRedActual < valorReferencia; i++) {\n      abRedActual = abRedes[i];\n      if (abRedActual >= valorReferencia) indexRedElegida = i;\n    }\n    return indexRedElegida;\n  };\n  const calcular = (referencia, perturbacion, red1, red2, red3) => {\n    let valorReferencia = referencia; //valor en Mbps ingresado por el tecnico\n    let puntoSuma1 = 0; //Punto suma del medidor y la referencia\n    let puntoSuma2 = 0; //Punto suma del controlador PD     \n    let pertubacionLluvia = perturbacion; //perturbacion  por lluvia\n\n    let kp = 1; //ganancia proporcional\n    let kd = 1; //ganancia derivativa\n\n    let controlProporcional = 0;\n    let controlDerivativo = 0;\n    let abRedes = [red1, red2, red3]; //Ancho de banda de cada red \n\n    let valorMedicion = 0; //valor en Mbps medido por el router en la salida\n    let difTiempo;\n    let tiempo = 1; // es el tiempo loop actual, \n    //seteo valor en 1 para que empiece adelantado 1 milisegundo\n\n    let tiempoViejo = 0; //es el tiempo del loop anterior\n\n    for (let index = 0; index < 10; index++) {\n      console.log(referencia, perturbacion, red1, red2, red3, indexRedActual, senalErrorAnterior);\n      valorMedicion = salida;\n      puntoSuma1 = valorReferencia - valorMedicion; //senal e\n\n      difTiempo = tiempo - tiempoViejo;\n      controlProporcional = puntoSuma1 * kp; //salida proporcional\n\n      controlDerivativo = (puntoSuma1 - senalErrorAnterior) * kd / difTiempo; //salida derivativa\n\n      puntoSuma2 = controlProporcional + controlDerivativo; //salida del PD\n\n      console.log(controlProporcional, controlDerivativo);\n      if (puntoSuma2 > 0)\n        //Accion de conmutar las redes, Menor a 0 significa VM > VR, que es lo que se busca\n        {\n          indexRedActual = elegirOtraRed(indexRedActual, abRedes, valorReferencia);\n          //conmutarRed(indexRedActual);                          //Funcion que implementa el cambio de redes\n        }\n      senalErrorAnterior = puntoSuma1;\n      generateData(tiempo, tiempoViejo, salida);\n      salida = abRedes[indexRedActual] + pertubacionLluvia; //Salida del sistema, luego del punto suma con la perturbacion por lluvia\n      tiempo += 1;\n      tiempoViejo += 1;\n      console.log(salida);\n    }\n  };\n  const generateData = (tiempo, tiempoViejo, salida) => {\n    console.log(tiempo, tiempoViejo);\n    let dataSalida = [];\n    for (let x = 0; x <= 10; x += 0.1) {\n      if (x >= tiempoViejo && x < tiempo) {\n        dataSalida.push({\n          x,\n          y: salida\n        });\n      }\n    }\n    debugger;\n    setChartData(prevChartData => ({\n      datasets: [{\n        ...prevChartData.datasets[0],\n        data: [...prevChartData.datasets[0].data, ...dataSalida]\n      }]\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 9\n  }, this);\n};\n_s(GraficaFuncionPartida, \"rSMrFjkQ/ZU9MyEUB3aHgttufSA=\");\n_c = GraficaFuncionPartida;\nexport default GraficaFuncionPartida;\nvar _c;\n$RefreshReg$(_c, \"GraficaFuncionPartida\");","map":{"version":3,"names":["React","useState","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","salida","indexRedActual","senalErrorAnterior","GraficaFuncionPartida","valuesFormik","_s","chartData","setChartData","labels","Array","keys","map","x","datasets","label","data","borderColor","borderWidth","fill","stepped","pointRadius","chartOptions","setChartOptions","responsive","plugins","legend","position","title","display","text","scales","type","min","max","ticks","callback","value","Number","isInteger","y","stepSize","useEffect","valuesInput","calcular","referencia","perturbacion","red1","red2","red3","elegirOtraRed","abRedes","valorReferencia","indexRedElegida","abRedActual","i","puntoSuma1","puntoSuma2","pertubacionLluvia","kp","kd","controlProporcional","controlDerivativo","valorMedicion","difTiempo","tiempo","tiempoViejo","index","console","log","generateData","dataSalida","push","prevChartData","Fragment","children","options","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Bruno/Desktop/TABLERO DE CONTROL/tablero-control-conmutador/src/Grafica.js"],"sourcesContent":["import React, {useState} from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\r\n\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\n//Variables globales\r\nlet salida = 0;                 //salida del sistema\r\nlet indexRedActual = 0;         //red actualmente elegida\r\nlet senalErrorAnterior = 0;     //señal de error del loop anterior\r\n\r\nconst GraficaFuncionPartida = (valuesFormik) => {\r\n    const [chartData, setChartData] = useState({\r\n        labels: [...Array(101).keys()].map(x => x * 0.1), // etiquetas de 0 a 10 con pasos de 0.1\r\n        datasets: [\r\n            {\r\n                label: 'f(x)',\r\n                data: [],\r\n                borderColor: 'rgba(75,192,192,1)',\r\n                borderWidth: 2,\r\n                fill: false,\r\n                stepped: 'before', // Hacer la línea escalonada\r\n                pointRadius: 0, // Hide points\r\n            },\r\n        ],\r\n    });\r\n    const [chartOptions, setChartOptions] = useState({\r\n        responsive: true,\r\n        plugins: {\r\n            legend: {\r\n                position: 'top',\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: 'Gráfica de la respuesta del sistema',\r\n            },\r\n        },\r\n        scales: {\r\n            x: {\r\n                type: 'linear',\r\n                title: {\r\n                    display: true,\r\n                    text: 'Milisegundos',\r\n                },\r\n                min: 0,\r\n                max: 10,\r\n                ticks: {\r\n                    callback: function(value) {\r\n                        return Number.isInteger(value) ? value : null; // Show only integer values\r\n                    },\r\n                },\r\n            },\r\n            y: {\r\n                title: {\r\n                    display: true,\r\n                    text: 'Mbps',\r\n                },\r\n                min: 0,\r\n                max: 1500,\r\n                ticks: {\r\n                    stepSize: 100,\r\n                },\r\n            },\r\n        },\r\n    });\r\n\r\n    React.useEffect(() => {\r\n\r\n        if (valuesFormik?.valuesInput) {\r\n        setChartData({\r\n            labels: [...Array(101).keys()].map(x => x * 0.1), // etiquetas de 0 a 10 con pasos de 0.1\r\n            datasets: [\r\n                {\r\n                    label: 'f(t)',\r\n                    data: [],\r\n                    borderColor: 'rgba(75,192,192,1)',\r\n                    borderWidth: 2,\r\n                    fill: false,\r\n                    stepped: 'before', // Hacer la línea escalonada\r\n                    pointRadius: 0, // Hide points\r\n                },\r\n            ],\r\n        })\r\n        calcular(valuesFormik.valuesInput.referencia, valuesFormik.valuesInput.perturbacion, valuesFormik.valuesInput.red1, valuesFormik.valuesInput.red2, valuesFormik.valuesInput.red3);\r\n    }\r\n\r\n    }, [valuesFormik]);\r\n\r\n\r\n    const elegirOtraRed = (indexRedActual, abRedes, valorReferencia) => {\r\n        let indexRedElegida = indexRedActual;\r\n        let abRedActual = abRedes[indexRedActual];\r\n        for (let i = 0; abRedActual < valorReferencia; i++) {\r\n            abRedActual = abRedes[i];\r\n            if (abRedActual >= valorReferencia)\r\n                indexRedElegida = i;\r\n\r\n        }\r\n        return indexRedElegida;\r\n\r\n    }\r\n\r\n    const calcular = (referencia, perturbacion, red1, red2, red3) => {\r\n\r\n                \r\n        let valorReferencia = referencia;  //valor en Mbps ingresado por el tecnico\r\n        let puntoSuma1 = 0;                //Punto suma del medidor y la referencia\r\n        let puntoSuma2 = 0;                //Punto suma del controlador PD     \r\n        let pertubacionLluvia = perturbacion; //perturbacion  por lluvia\r\n\r\n\r\n        let kp = 1;                         //ganancia proporcional\r\n        let kd = 1;                         //ganancia derivativa\r\n\r\n        let controlProporcional = 0;  \r\n        let controlDerivativo = 0;\r\n        let abRedes = [red1, red2, red3];       //Ancho de banda de cada red \r\n\r\n        let valorMedicion = 0;                  //valor en Mbps medido por el router en la salida\r\n        let difTiempo;\r\n        let tiempo = 1;                         // es el tiempo loop actual, \r\n                                                //seteo valor en 1 para que empiece adelantado 1 milisegundo\r\n\r\n        let tiempoViejo = 0;                    //es el tiempo del loop anterior\r\n\r\n\r\n        for (let index = 0; index < 10; index++) {\r\n            console.log(referencia, perturbacion, red1, red2, red3, indexRedActual, senalErrorAnterior)\r\n\r\n            valorMedicion = salida;\r\n\r\n            puntoSuma1 = valorReferencia - valorMedicion;            //senal e\r\n\r\n\r\n            difTiempo = tiempo - tiempoViejo;\r\n\r\n\r\n            controlProporcional = puntoSuma1 * kp;                                          //salida proporcional\r\n\r\n            controlDerivativo = (puntoSuma1 - senalErrorAnterior) * kd / difTiempo;         //salida derivativa\r\n\r\n            puntoSuma2 = controlProporcional + controlDerivativo;                           //salida del PD\r\n\r\n            console.log(controlProporcional,controlDerivativo);\r\n            if (puntoSuma2 > 0)                             //Accion de conmutar las redes, Menor a 0 significa VM > VR, que es lo que se busca\r\n            {\r\n                indexRedActual = elegirOtraRed(indexRedActual, abRedes, valorReferencia);\r\n                //conmutarRed(indexRedActual);                          //Funcion que implementa el cambio de redes\r\n\r\n            }\r\n\r\n\r\n\r\n            senalErrorAnterior = puntoSuma1;\r\n            generateData(tiempo, tiempoViejo, salida)\r\n            salida = abRedes[indexRedActual] + pertubacionLluvia;     //Salida del sistema, luego del punto suma con la perturbacion por lluvia\r\n            tiempo += 1;\r\n            tiempoViejo += 1;\r\n            console.log(salida);\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const generateData = (tiempo, tiempoViejo, salida) => {\r\n        console.log(tiempo, tiempoViejo);\r\n        let dataSalida = [];\r\n        for (let x = 0; x <= 10; x+=0.1) {\r\n            if (x >= tiempoViejo && x < tiempo) {\r\n                dataSalida.push({ x, y: salida });\r\n            }\r\n        }\r\n        debugger;\r\n        setChartData(prevChartData => ({\r\n            datasets: [{\r\n              ...prevChartData.datasets[0],\r\n              data: [...prevChartData.datasets[0].data, ...dataSalida],\r\n            }],\r\n          }));\r\n        };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Line data={chartData} options={chartOptions} />\r\n        </React.Fragment>)\r\n};\r\n\r\nexport default GraficaFuncionPartida;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}