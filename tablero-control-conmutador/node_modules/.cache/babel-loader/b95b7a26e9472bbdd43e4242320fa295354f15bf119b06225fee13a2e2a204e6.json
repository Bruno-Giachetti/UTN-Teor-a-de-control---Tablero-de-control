{"ast":null,"code":"import React,{useState}from'react';import{Line}from'react-chartjs-2';import{Chart as ChartJS,CategoryScale,LinearScale,PointElement,LineElement,Title,Tooltip,Legend}from'chart.js';import{jsx as _jsx}from\"react/jsx-runtime\";ChartJS.register(CategoryScale,LinearScale,PointElement,LineElement,Title,Tooltip,Legend);//Variables globales\nlet salida=0;//salida del sistema\nlet indexRedActual=0;//red actualmente elegida\nlet senalErrorAnterior=0;//señal de error del loop anterior\nconst GraficaFuncionPartida=valuesFormik=>{const[chartData,setChartData]=useState({labels:[...Array(101).keys()].map(x=>x*0.1),// etiquetas de 0 a 10 con pasos de 0.1\ndatasets:[{label:'f(x)',data:[],borderColor:'rgba(75,192,192,1)',borderWidth:2,fill:false,stepped:'before',// Hacer la línea escalonada\npointRadius:0// Hide points\n}]});const[chartOptions,setChartOptions]=useState({responsive:true,plugins:{legend:{position:'top'},title:{display:true,text:'Gráfica de la respuesta del sistema'}},scales:{x:{type:'linear',title:{display:true,text:'Milisegundos'},min:0,max:10,ticks:{callback:function(value){return Number.isInteger(value)?value:null;// Show only integer values\n}}},y:{title:{display:true,text:'Mbps'},min:0,max:1500,ticks:{stepSize:100}}}});React.useEffect(()=>{if(valuesFormik!==null&&valuesFormik!==void 0&&valuesFormik.valuesInput){setChartData({labels:[...Array(101).keys()].map(x=>x*0.1),// etiquetas de 0 a 10 con pasos de 0.1\ndatasets:[{label:'f(t)',data:[],borderColor:'rgba(75,192,192,1)',borderWidth:2,fill:false,stepped:'before',// Hacer la línea escalonada\npointRadius:0// Hide points\n}]});calcular(valuesFormik.valuesInput.referencia,valuesFormik.valuesInput.perturbacion,valuesFormik.valuesInput.red1,valuesFormik.valuesInput.red2,valuesFormik.valuesInput.red3);}},[valuesFormik]);const elegirOtraRed=(indexRedActual,abRedes,valorReferencia)=>{let indexRedElegida=indexRedActual;let abRedActual=abRedes[indexRedActual];for(let i=0;abRedActual<valorReferencia;i++){abRedActual=abRedes[i];if(abRedActual>=valorReferencia)indexRedElegida=i;}return indexRedElegida;};const calcular=(referencia,perturbacion,red1,red2,red3)=>{let valorReferencia=referencia;//valor en Mbps ingresado por el tecnico\nlet puntoSuma1=0;//Punto suma del medidor y la referencia\nlet puntoSuma2=0;//Punto suma del controlador PD     \nlet pertubacionLluvia=perturbacion;//perturbacion  por lluvia\nlet kp=1;//ganancia proporcional\nlet kd=1;//ganancia derivativa\nlet controlProporcional=0;let controlDerivativo=0;let abRedes=[red1,red2,red3];//Ancho de banda de cada red \nlet valorMedicion=0;//valor en Mbps medido por el router en la salida\nlet difTiempo;let tiempo=1;// es el tiempo loop actual, \n//seteo valor en 1 para que empiece adelantado 1 milisegundo\nlet tiempoViejo=0;//es el tiempo del loop anterior\nfor(let index=0;index<10;index++){console.log(referencia,perturbacion,red1,red2,red3,indexRedActual,senalErrorAnterior);valorMedicion=salida;puntoSuma1=valorReferencia-valorMedicion;//senal e\ndifTiempo=tiempo-tiempoViejo;controlProporcional=puntoSuma1*kp;//salida proporcional\ncontrolDerivativo=(puntoSuma1-senalErrorAnterior)*kd/difTiempo;//salida derivativa\npuntoSuma2=controlProporcional+controlDerivativo;//salida del PD\nconsole.log(controlProporcional,controlDerivativo);if(puntoSuma2>0)//Accion de conmutar las redes, Menor a 0 significa VM > VR, que es lo que se busca\n{indexRedActual=elegirOtraRed(indexRedActual,abRedes,valorReferencia);//conmutarRed(indexRedActual);                          //Funcion que implementa el cambio de redes\n}senalErrorAnterior=puntoSuma1;generateData(tiempo,tiempoViejo,salida);salida=abRedes[indexRedActual]+pertubacionLluvia;//Salida del sistema, luego del punto suma con la perturbacion por lluvia\ntiempo+=1;tiempoViejo+=1;console.log(salida);}};const generateData=(tiempo,tiempoViejo,salida)=>{console.log(tiempo,tiempoViejo);let dataSalida=[];for(let x=0;x<=10;x+=0.1){if(x>=tiempoViejo&&x<tiempo){dataSalida.push({x,y:salida});}}debugger;setChartData(prevChartData=>({datasets:[{...prevChartData.datasets[0],data:[...prevChartData.datasets[0].data,...dataSalida]}]}));};return/*#__PURE__*/_jsx(React.Fragment,{children:/*#__PURE__*/_jsx(Line,{data:chartData,options:chartOptions})});};export default GraficaFuncionPartida;","map":{"version":3,"names":["React","useState","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsx","_jsx","register","salida","indexRedActual","senalErrorAnterior","GraficaFuncionPartida","valuesFormik","chartData","setChartData","labels","Array","keys","map","x","datasets","label","data","borderColor","borderWidth","fill","stepped","pointRadius","chartOptions","setChartOptions","responsive","plugins","legend","position","title","display","text","scales","type","min","max","ticks","callback","value","Number","isInteger","y","stepSize","useEffect","valuesInput","calcular","referencia","perturbacion","red1","red2","red3","elegirOtraRed","abRedes","valorReferencia","indexRedElegida","abRedActual","i","puntoSuma1","puntoSuma2","pertubacionLluvia","kp","kd","controlProporcional","controlDerivativo","valorMedicion","difTiempo","tiempo","tiempoViejo","index","console","log","generateData","dataSalida","push","prevChartData","Fragment","children","options"],"sources":["C:/Users/Bruno/Desktop/TABLERO DE CONTROL/tablero-control-conmutador/src/Grafica.js"],"sourcesContent":["import React, {useState} from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\r\n\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\n//Variables globales\r\nlet salida = 0;                 //salida del sistema\r\nlet indexRedActual = 0;         //red actualmente elegida\r\nlet senalErrorAnterior = 0;     //señal de error del loop anterior\r\n\r\nconst GraficaFuncionPartida = (valuesFormik) => {\r\n    const [chartData, setChartData] = useState({\r\n        labels: [...Array(101).keys()].map(x => x * 0.1), // etiquetas de 0 a 10 con pasos de 0.1\r\n        datasets: [\r\n            {\r\n                label: 'f(x)',\r\n                data: [],\r\n                borderColor: 'rgba(75,192,192,1)',\r\n                borderWidth: 2,\r\n                fill: false,\r\n                stepped: 'before', // Hacer la línea escalonada\r\n                pointRadius: 0, // Hide points\r\n            },\r\n        ],\r\n    });\r\n    const [chartOptions, setChartOptions] = useState({\r\n        responsive: true,\r\n        plugins: {\r\n            legend: {\r\n                position: 'top',\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: 'Gráfica de la respuesta del sistema',\r\n            },\r\n        },\r\n        scales: {\r\n            x: {\r\n                type: 'linear',\r\n                title: {\r\n                    display: true,\r\n                    text: 'Milisegundos',\r\n                },\r\n                min: 0,\r\n                max: 10,\r\n                ticks: {\r\n                    callback: function(value) {\r\n                        return Number.isInteger(value) ? value : null; // Show only integer values\r\n                    },\r\n                },\r\n            },\r\n            y: {\r\n                title: {\r\n                    display: true,\r\n                    text: 'Mbps',\r\n                },\r\n                min: 0,\r\n                max: 1500,\r\n                ticks: {\r\n                    stepSize: 100,\r\n                },\r\n            },\r\n        },\r\n    });\r\n\r\n    React.useEffect(() => {\r\n\r\n        if (valuesFormik?.valuesInput) {\r\n        setChartData({\r\n            labels: [...Array(101).keys()].map(x => x * 0.1), // etiquetas de 0 a 10 con pasos de 0.1\r\n            datasets: [\r\n                {\r\n                    label: 'f(t)',\r\n                    data: [],\r\n                    borderColor: 'rgba(75,192,192,1)',\r\n                    borderWidth: 2,\r\n                    fill: false,\r\n                    stepped: 'before', // Hacer la línea escalonada\r\n                    pointRadius: 0, // Hide points\r\n                },\r\n            ],\r\n        })\r\n        calcular(valuesFormik.valuesInput.referencia, valuesFormik.valuesInput.perturbacion, valuesFormik.valuesInput.red1, valuesFormik.valuesInput.red2, valuesFormik.valuesInput.red3);\r\n    }\r\n\r\n    }, [valuesFormik]);\r\n\r\n\r\n    const elegirOtraRed = (indexRedActual, abRedes, valorReferencia) => {\r\n        let indexRedElegida = indexRedActual;\r\n        let abRedActual = abRedes[indexRedActual];\r\n        for (let i = 0; abRedActual < valorReferencia; i++) {\r\n            abRedActual = abRedes[i];\r\n            if (abRedActual >= valorReferencia)\r\n                indexRedElegida = i;\r\n\r\n        }\r\n        return indexRedElegida;\r\n\r\n    }\r\n\r\n    const calcular = (referencia, perturbacion, red1, red2, red3) => {\r\n\r\n                \r\n        let valorReferencia = referencia;  //valor en Mbps ingresado por el tecnico\r\n        let puntoSuma1 = 0;                //Punto suma del medidor y la referencia\r\n        let puntoSuma2 = 0;                //Punto suma del controlador PD     \r\n        let pertubacionLluvia = perturbacion; //perturbacion  por lluvia\r\n\r\n\r\n        let kp = 1;                         //ganancia proporcional\r\n        let kd = 1;                         //ganancia derivativa\r\n\r\n        let controlProporcional = 0;  \r\n        let controlDerivativo = 0;\r\n        let abRedes = [red1, red2, red3];       //Ancho de banda de cada red \r\n\r\n        let valorMedicion = 0;                  //valor en Mbps medido por el router en la salida\r\n        let difTiempo;\r\n        let tiempo = 1;                         // es el tiempo loop actual, \r\n                                                //seteo valor en 1 para que empiece adelantado 1 milisegundo\r\n\r\n        let tiempoViejo = 0;                    //es el tiempo del loop anterior\r\n\r\n\r\n        for (let index = 0; index < 10; index++) {\r\n            console.log(referencia, perturbacion, red1, red2, red3, indexRedActual, senalErrorAnterior)\r\n\r\n            valorMedicion = salida;\r\n\r\n            puntoSuma1 = valorReferencia - valorMedicion;            //senal e\r\n\r\n\r\n            difTiempo = tiempo - tiempoViejo;\r\n\r\n\r\n            controlProporcional = puntoSuma1 * kp;                                          //salida proporcional\r\n\r\n            controlDerivativo = (puntoSuma1 - senalErrorAnterior) * kd / difTiempo;         //salida derivativa\r\n\r\n            puntoSuma2 = controlProporcional + controlDerivativo;                           //salida del PD\r\n\r\n            console.log(controlProporcional,controlDerivativo);\r\n            if (puntoSuma2 > 0)                             //Accion de conmutar las redes, Menor a 0 significa VM > VR, que es lo que se busca\r\n            {\r\n                indexRedActual = elegirOtraRed(indexRedActual, abRedes, valorReferencia);\r\n                //conmutarRed(indexRedActual);                          //Funcion que implementa el cambio de redes\r\n\r\n            }\r\n\r\n\r\n\r\n            senalErrorAnterior = puntoSuma1;\r\n            generateData(tiempo, tiempoViejo, salida)\r\n            salida = abRedes[indexRedActual] + pertubacionLluvia;     //Salida del sistema, luego del punto suma con la perturbacion por lluvia\r\n            tiempo += 1;\r\n            tiempoViejo += 1;\r\n            console.log(salida);\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const generateData = (tiempo, tiempoViejo, salida) => {\r\n        console.log(tiempo, tiempoViejo);\r\n        let dataSalida = [];\r\n        for (let x = 0; x <= 10; x+=0.1) {\r\n            if (x >= tiempoViejo && x < tiempo) {\r\n                dataSalida.push({ x, y: salida });\r\n            }\r\n        }\r\n        debugger;\r\n        setChartData(prevChartData => ({\r\n            datasets: [{\r\n              ...prevChartData.datasets[0],\r\n              data: [...prevChartData.datasets[0].data, ...dataSalida],\r\n            }],\r\n          }));\r\n        };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Line data={chartData} options={chartOptions} />\r\n        </React.Fragment>)\r\n};\r\n\r\nexport default GraficaFuncionPartida;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}